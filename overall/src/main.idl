module models{ module impl{ interface GeneralObject{}; }; };
module models{module idl{
module social_connection{
  interface User;
  interface Group;
};

module social_connection{

  enum ResultCodeEnum{
    Success,
    Failed_To_Connect_To_Database,
    User_Not_Exist,
    Password_Wrong,
    No_Permission,
    Name_Exist,
    Group_Not_Exist,
    Request_Param_Missing,
    Request_Param_Wrong_Type
  };
  exception GeneralException{long resultCode;};

  enum SexEnum{M,F,Not_Given};
  struct UserAccount{
    string email;
    string phoneNum;
    string password;
    string firstName;
    string lastName;
    string nickName;
    SexEnum sex;
  };
  interface User:models::impl::GeneralObject{
    readonly attribute string userId;
    readonly attribute string userIntro;
    struct UserGroup{
      string groupID;
      string groupName;
      /*used for sorting in front-end*/
      long long lastActionTime;
      long long joinTime;
    };
    typedef sequence<UserGroup> UserGroupSeq;
    void getUserGroupList(out UserGroupSeq userGroupSeq,out short numUserGroup);
  };
  interface UserManager{
    void createUser(in UserAccount newUserAccount) raises (GeneralException);

    /*login operation, return session if success, raise exception if failed*/
    string getSessionId(in string username,in string password) raises (GeneralException);
  };

  interface Group{
    readonly attribute string groupId;
    readonly attribute string groupName;
    readonly attribute string groupIntro;
    readonly attribute string hostUserId;
    struct GroupUser{
      string userId;
      long long lastActionTime;
      long long joinTime;
    };
    typedef sequence<GroupUser> GroupUserSeq;
    void getGroupUserList(out GroupUserSeq groupUserSeq, out short numGroupUser);
  };
  interface GroupManager{
    void createGroup(in string groupName, in string groupIntro) raises (GeneralException);
    Group getGroup(in string groupId) raises (GeneralException);
  };

  interface Conference{};

  interface Exhibition{};
};
};};