///<reference path="DataObject.ts"/>
/** @remark this is auto-generated file, do not edit
 * generated by php script
 * */
declare function get_all_row($http: any, table_name: string) : any[];
module stub {
  export class Follow_stub extends stub.DataObject {

    /* key */
    protected static __follow_id():string {
      return "follow_id";
    }

    protected static __follower_account_id():string {
      return "follower_account_id";
    }

    protected static __followed_account_id():string {
      return "followed_account_id";
    }

    protected static __remark():string {
      return "remark";
    }

    protected static __deleted():string {
      return "deleted";
    }

    protected static __create_time():string {
      return "create_time";
    }

    protected static __edit_time():string {
      return "edit_time";
    }

    /* implement DataObject */
    tableName():string {
      return "Follow";
    }
    
    uniqueKeyList():string[] {
      var list:string[] = [];
      list.push("follow_id");
      list.push("follower_account_id");
      list.push("followed_account_id");
      return list;
    }
    
    allKeyList():string[] {
      var list:string[] = [];
      list.push("follow_id");
      list.push("follower_account_id");
      list.push("followed_account_id");
      list.push("remark");
      list.push("deleted");
      list.push("create_time");
      list.push("edit_time");
      return list;
    }
    
    parseObject(rawObject:any):Follow_stub {
      var instance = new Follow_stub();
      if(rawObject.hasOwnProperty('follow_id'))
        instance.follow_id = rawObject.follow_id;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('follower_account_id'))
        instance.follower_account_id = rawObject.follower_account_id;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('followed_account_id'))
        instance.followed_account_id = rawObject.followed_account_id;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('remark'))
        instance.remark = rawObject.remark;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('deleted'))
        instance.deleted = rawObject.deleted;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('create_time'))
        instance.create_time = rawObject.create_time;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('edit_time'))
        instance.edit_time = rawObject.edit_time;
      else
        throw new stub.DataObjectParseError(this);
      return instance;
    }
    
    toObject(instance:Follow_stub=this):any {
      var rawObject = {};
      rawObject[Follow_stub.__follow_id()] = instance.follow_id;
      rawObject[Follow_stub.__follower_account_id()] = instance.follower_account_id;
      rawObject[Follow_stub.__followed_account_id()] = instance.followed_account_id;
      rawObject[Follow_stub.__remark()] = instance.remark;
      rawObject[Follow_stub.__deleted()] = instance.deleted;
      rawObject[Follow_stub.__create_time()] = instance.create_time;
      rawObject[Follow_stub.__edit_time()] = instance.edit_time;
      return rawObject;
    }

    /* variable */
    private follow_id:number;
    private follower_account_id:number;
    private followed_account_id:number;
    private remark:string;
    private deleted:any;
    private create_time:string;
    private edit_time:string;

    /* getter and setter */
    public get_follow_id():number {
      return this.follow_id * 1;
    }

    public set_follow_id(newValue:number) {
      if (this.isEditSupport()) {
        this.follow_id = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_follower_account_id():number {
      return this.follower_account_id * 1;
    }

    public set_follower_account_id(newValue:number) {
      if (this.isEditSupport()) {
        this.follower_account_id = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_followed_account_id():number {
      return this.followed_account_id * 1;
    }

    public set_followed_account_id(newValue:number) {
      if (this.isEditSupport()) {
        this.followed_account_id = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_remark():string {
      return this.remark ;
    }

    public set_remark(newValue:string) {
      if (this.isEditSupport()) {
        this.remark = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_deleted():any {
      return this.deleted ;
    }

    public set_deleted(newValue:any) {
      if (this.isEditSupport()) {
        this.deleted = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_create_time():string {
      return this.create_time ;
    }

    public set_create_time(newValue:string) {
      if (this.isEditSupport()) {
        this.create_time = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_edit_time():string {
      return this.edit_time ;
    }

    public set_edit_time(newValue:string) {
      if (this.isEditSupport()) {
        this.edit_time = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

  }
  stub.add_stub_instance(new Follow_stub());
}