///<reference path="DataObject.ts"/>
/** @remark this is auto-generated file, do not edit
 * generated by php script
 * */
declare function get_all_row($http: any, table_name: string) : any[];
module stub {
  export class User_stub extends stub.DataObject {

    /* key */
    protected static __account_id():string {
      return "account_id";
    }

    protected static __sex():string {
      return "sex";
    }

    protected static __first_name():string {
      return "first_name";
    }

    protected static __last_name():string {
      return "last_name";
    }

    protected static __organization_id():string {
      return "organization_id";
    }

    protected static __title_id():string {
      return "title_id";
    }

    protected static __city_id():string {
      return "city_id";
    }

    protected static __last_announcement_datetime():string {
      return "last_announcement_datetime";
    }

    protected static __organization():string {
      return "organization";
    }

    protected static __city():string {
      return "city";
    }

    protected static __country():string {
      return "country";
    }

    protected static __title():string {
      return "title";
    }

    /* implement DataObject */
    tableName():string {
      return "User";
    }
    
    uniqueKeyList():string[] {
      var list:string[] = [];
      list.push("account_id");
      return list;
    }
    
    allKeyList():string[] {
      var list:string[] = [];
      list.push("account_id");
      list.push("sex");
      list.push("first_name");
      list.push("last_name");
      list.push("organization_id");
      list.push("title_id");
      list.push("city_id");
      list.push("last_announcement_datetime");
      list.push("organization");
      list.push("city");
      list.push("country");
      list.push("title");
      return list;
    }
    
    parseObject(rawObject:any):User_stub {
      var instance = new User_stub();
      if(rawObject.hasOwnProperty('account_id'))
        instance.account_id = rawObject.account_id;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('sex'))
        instance.sex = rawObject.sex;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('first_name'))
        instance.first_name = rawObject.first_name;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('last_name'))
        instance.last_name = rawObject.last_name;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('organization_id'))
        instance.organization_id = rawObject.organization_id;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('title_id'))
        instance.title_id = rawObject.title_id;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('city_id'))
        instance.city_id = rawObject.city_id;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('last_announcement_datetime'))
        instance.last_announcement_datetime = rawObject.last_announcement_datetime;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('organization'))
        instance.organization = rawObject.organization;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('city'))
        instance.city = rawObject.city;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('country'))
        instance.country = rawObject.country;
      else
        throw new stub.DataObjectParseError(this);
      if(rawObject.hasOwnProperty('title'))
        instance.title = rawObject.title;
      else
        throw new stub.DataObjectParseError(this);
      return instance;
    }
    
    toObject(instance:User_stub=this):any {
      var rawObject = {};
      rawObject[User_stub.__account_id()] = instance.account_id;
      rawObject[User_stub.__sex()] = instance.sex;
      rawObject[User_stub.__first_name()] = instance.first_name;
      rawObject[User_stub.__last_name()] = instance.last_name;
      rawObject[User_stub.__organization_id()] = instance.organization_id;
      rawObject[User_stub.__title_id()] = instance.title_id;
      rawObject[User_stub.__city_id()] = instance.city_id;
      rawObject[User_stub.__last_announcement_datetime()] = instance.last_announcement_datetime;
      rawObject[User_stub.__organization()] = instance.organization;
      rawObject[User_stub.__city()] = instance.city;
      rawObject[User_stub.__country()] = instance.country;
      rawObject[User_stub.__title()] = instance.title;
      return rawObject;
    }

    /* variable */
    private account_id:number;
    private sex:string;
    private first_name:string;
    private last_name:string;
    private organization_id:number;
    private title_id:number;
    private city_id:number;
    private last_announcement_datetime:string;
    private organization:string;
    private city:string;
    private country:string;
    private title:string;

    /* getter and setter */
    public get_account_id():number {
      return this.account_id * 1;
    }

    public set_account_id(newValue:number) {
      if (this.isEditSupport()) {
        this.account_id = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_sex():string {
      return this.sex ;
    }

    public set_sex(newValue:string) {
      if (this.isEditSupport()) {
        this.sex = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_first_name():string {
      return this.first_name ;
    }

    public set_first_name(newValue:string) {
      if (this.isEditSupport()) {
        this.first_name = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_last_name():string {
      return this.last_name ;
    }

    public set_last_name(newValue:string) {
      if (this.isEditSupport()) {
        this.last_name = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_organization_id():number {
      return this.organization_id * 1;
    }

    public set_organization_id(newValue:number) {
      if (this.isEditSupport()) {
        this.organization_id = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_title_id():number {
      return this.title_id * 1;
    }

    public set_title_id(newValue:number) {
      if (this.isEditSupport()) {
        this.title_id = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_city_id():number {
      return this.city_id * 1;
    }

    public set_city_id(newValue:number) {
      if (this.isEditSupport()) {
        this.city_id = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_last_announcement_datetime():string {
      return this.last_announcement_datetime ;
    }

    public set_last_announcement_datetime(newValue:string) {
      if (this.isEditSupport()) {
        this.last_announcement_datetime = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_organization():string {
      return this.organization ;
    }

    public set_organization(newValue:string) {
      if (this.isEditSupport()) {
        this.organization = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_city():string {
      return this.city ;
    }

    public set_city(newValue:string) {
      if (this.isEditSupport()) {
        this.city = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_country():string {
      return this.country ;
    }

    public set_country(newValue:string) {
      if (this.isEditSupport()) {
        this.country = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

    public get_title():string {
      return this.title ;
    }

    public set_title(newValue:string) {
      if (this.isEditSupport()) {
        this.title = newValue;
      } else {
        throw new DataObjectEditError(this);
      }
    }

  }
  stub.add_stub_instance(new User_stub());
}